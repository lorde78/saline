datasource db {
  provider = "mysql"
  //   url      = env("DATABASE_URL")
  url      = "mysql://root:@localhost:3306/saline_db?schema=public"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int  @id @default(autoincrement())
  email          String         @unique
  name           String?
  firstName      String?
  password       String
  token          String?
  profilePicture String?
  createdAt      DateTime       @default(now())
  lastConnection DateTime?
  roles          Json
  phoneNumber    String?
  genre          String?
  nationality    String?
  progress       Json
  birthDate      DateTime?
  postalAddress  String?
  Certification  Certification[]
  Comment        Comment[]
  Answer         Answer[]
  Lesson         Lesson[]
  Training       Training[]
  Annotation     Annotation[]
  // Classroom      Classroom?     @relation(fields: [id], references: [id], onDelete: NoAction)
  Discount       Discount[]
  // Subscription   Subscription[]
}

model Certification {
  id             Int  @id @unique @default(autoincrement())
  name           String?
  graduationDate DateTime?
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model Lesson {
  id             Int  @id @default(autoincrement())
  title           String?
  description     String?
  numberSteps     Int?
  difficultyLevel String?
  price           Int?
  duration        String?
  nbViews         Int?
  nbCompleted     Int?
  userId          Int?
  user            User?          @relation(fields: [userId], references: [id])
  // tags            Tag[]
  trainings       Training[]
  comments        Comment[]
  // classrooms      Classroom[]
  // subscriptions   Subscription[]
  videos          Video[]
  discounts       Discount[]
  annotations      Annotation[]
  // annotationId    String?
}

// model Classroom {
//   id             Int  @id @default(autoincrement())
//   title      String?
//   createdAt  DateTime   @default(now())
//   lastUpdate DateTime   @default(now())
//   students   User[]
//   lessons    Lesson[]
//   trainings  Training[]
//   // comments   Comment[]
//   // autor      User?      @relation("ClassroomUser", fields: [id], references: [id])
//   // // User       User?
//   User       User?      @relation(fields: [userId], references: [id])
//   userId     String?
// }

model Training {
  id             Int  @id @default(autoincrement())
  title           String?
  description     String?
  difficultyLevel String?
  createdAt       DateTime       @default(now())
  lastUpdate      DateTime       @default(now())
  accesibility    Boolean
  price           Int?
  duration        String?
  userId          Int?
  user            User?          @relation(fields: [userId], references: [id])
  // autor           User?         @relation(fields: [id], references: [id])
  nbViews         Int?
  nbrCompleted    Int?
  nbrCertified    Int?
  Lessons         Lesson[]
  // classrooms      Classroom[]
  Tags            Tag[]
  // Subscriptions   Subscription[]
  Discounts       Discount[]
}

model Comment {
  id             Int  @id @default(autoincrement())
  content     String?
  createdAt   DateTime @default(now())
  lastUpdate  DateTime @default(now())
  nbUpvotes   Int?     @default(0)
  nbDownvotes Int?
  userId      Int?
  lessonId      Int?
  Lesson      Lesson?    @relation(fields: [lessonId], references: [id])
  Answer      Answer[]
  user        User?     @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model Answer {
  id         String   @id @unique @default(uuid())
  content    String?
  createdAt  DateTime @default(now())
  lastUpdate DateTime @default(now())
  commentId  Int?
  userId     Int?
  validation Boolean
  user        User?     @relation(fields: [userId], references: [id], onDelete: NoAction)
  comment        Comment?     @relation(fields: [commentId], references: [id])
}

model Annotation {
  id         String   @id @unique @default(uuid())
  content    String?
  createdAt  DateTime @default(now())
  lastUpdate DateTime @default(now())
  userId     Int?
  lessonId   Int?
  author      User?     @relation(fields: [userId], references: [id])
  lessons     Lesson? @relation(fields: [lessonId], references: [id])
  // User       User[]
  // Lesson     Lesson[]
}

model Tag {
  id             Int  @id @default(autoincrement())
  title       String?
  // lessons       Lesson[]
  trainings   Training[]
  videos      Video[]
  shortVideos ShortVideo[]
}

// model Subscription {
//   id             Int  @id @default(autoincrement())
//   title              String?
//   subscriptionType   String?
//   subscriptionStatus Boolean
//   price              Int?
//   createdAt          DateTime   @default(now())
//   lastUpdate         DateTime   @default(now())
//   lessons            Lesson[]
//   trainings          Training[]
//   user               User?      @relation(fields: [userId], references: [id])
//   nbSubscribers      Int?
//   userId Int?
// }

model Discount {
  id             Int  @id @default(autoincrement())
  title          String?
  percentage     Int?
  startDate      DateTime?
  endDate        DateTime?
  discountStatus Boolean
  createdAt      DateTime   @default(now())
  lastUpdate     DateTime   @default(now())
  userId         Int?
  author         User?      @relation(fields: [userId], references: [id])
  lessons        Lesson[]
  trainings      Training[]
  nbPurchases    Int?
}

model Video {
  id          String       @id @unique @default(uuid())
  title       String?
  url         String?
  createdAt   DateTime     @default(now())
  lastUpdate  DateTime     @default(now())
  tags        Tag[]
  lessons    Lesson[]
  shortVideos ShortVideo[]
}

model ShortVideo {
  id         String   @id @unique @default(uuid())
  startTime  String?
  endTime    String?
  createdAt  DateTime @default(now())
  lastUpdate DateTime @default(now())
  tags       Tag[]
  video      Video?   @relation(fields: [id], references: [id])
}
