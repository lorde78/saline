datasource db {
  provider = "mysql"
  //   url      = env("DATABASE_URL")
  url      = "mysql://root:@localhost:3306/saline_db?schema=public"
}

generator client {
  provider = "prisma-client-js"
}

// model Post {
//   id        String     @id @unique @default(uuid())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   authorId  Int?
// }

model User {
  id             String    @id @unique @default(uuid())
  email          String    @unique
  name           String?
  firstName      String?
  password       String
  token          String?
  profilePicture String?
  createdAt      DateTime  @default(now())
  lastConnection DateTime?
  roles          String[]
  phoneNumber    String?
  genre          String?
  nationality    String?
  progress       String[]
  birthDate      DateTime?
  postalAddress  String?
}

model Certification {
  id             String    @id @unique @default(uuid())
  name           String?
  graduationDate DateTime?
  user           User?     @relation(fields: [userId], references: [id])
}

model Lesson {
  id              String  @id @unique @default(uuid())
  title           String?
  description     String?
  numberSteps     Int?
  difficultyLevel String?
  price           Int?
  duration        String?
  nbViews         Int?
  nbCompleted     Int?
  user            User?   @relation(fields: [userId], references: [id])
  tags            Tag[]
  trainings       Training[]
  comments        Comment[]
}

model Classroom {
  id         String   @id @unique @default(uuid())
  title      String?
  createdAt  DateTime @default(now())
  lastUpdate DateTime @default(now())
  students   User[]
  lessons    Lesson[]
  trainings  Training[]
  comments   Comment[]
  autor      User?    @relation(fields: [userId], references: [id])
}

model Training {
  id              String   @id @unique @default(uuid())
  title           String?
  description     String?
  difficultyLevel String?
  createdAt       DateTime @default(now())
  lastUpdate      DateTime @default(now())
  accesibility    Boolean
  price           Int?
  duration        String?
  autor           User?    @relation(fields: [userId], references: [id])
  nbViews         Int?
  nbrCompleted    Int?
  nbrCertified    Int?
}

model Comment {
  id          String   @id @unique @default(uuid())
  content     String?
  createdAt   DateTime @default(now())
  lastUpdate  DateTime @default(now())
  autor       User?    @relation(fields: [userId], references: [id])
  lesson      Lesson?  @relation(fields: [lessonId], references: [id])
  nbUpvotes   Int?
  nbDownvotes Int?
  answers     Answer[]
}

model Answer {
  id         String   @id @unique @default(uuid())
  content    String?
  createdAt  DateTime @default(now())
  lastUpdate DateTime @default(now())
  autor      User?    @relation(fields: [userId], references: [id])
  comment    Comment? @relation(fields: [commentId], references: [id])
  validation Boolean
}

model Annotation {
  id         String   @id @unique @default(uuid())
  content    String?
  createdAt  DateTime @default(now())
  lastUpdate DateTime @default(now())
  autor      User?    @relation(fields: [userId], references: [id])
  lesson     Lesson?  @relation(fields: [lessonId], references: [id])
}

model Tag {
  id            String         @id @unique @default(uuid())
  title         String?
  lessons       Lesson[]
  trainings     Training[]
  discounts     Discount[]
  subscriptions Subscription[]
}

model Subscription {
  id         String   @id @unique @default(uuid())
  title      String?
  subscriptionType String?
  subscriptionStatus Boolean
  price      Int?
  createdAt  DateTime @default(now())
  lastUpdate DateTime @default(now())
  subbedUsers User[]
  tags       Tag
  lessons    Lesson[]
  trainings  Training[]
  user       User?    @relation(fields: [userId], references: [id])
  nbSubscribers Int?
}

model Discount {
  id         String   @id @unique @default(uuid())
  title      String?
  percentage Int?
  startDate  DateTime?  
  endDate    DateTime?
  discountStatus Boolean
  createdAt  DateTime @default(now())
  lastUpdate DateTime @default(now())
  author     User?    @relation(fields: [userId], references: [id])
  tags       Tag[]
  lessons    Lesson[]
  trainings  Training[]
  nbPurchases Int?
}


model Video {
  id         String   @id @unique @default(uuid())
  title      String?
  url        String?
  createdAt  DateTime @default(now())
  lastUpdate DateTime @default(now())
  tags     Tag[]
}

model ShortVideo {
  id         String   @id @unique @default(uuid())
  startTime  String?
  endTime    String?
  createdAt  DateTime @default(now())
  lastUpdate DateTime @default(now())
  video      Video?   @relation(fields: [videoId], references: [id])
}