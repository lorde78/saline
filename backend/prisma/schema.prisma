datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  Int             @id @default(autoincrement())
  email               String          @unique
  name                String?
  firstName           String?
  password            String
  profilePicture      String?
  createdAt           DateTime        @default(now())
  lastUpdate          DateTime        @updatedAt
  lastConnection      DateTime?
  roles               Json
  phoneNumber         String?
  genre               String?
  nationality         String?
  progress            Json
  birthDate           DateTime?
  postalAddress       String?
  Comments            Comment[]
  Answers             Answer[]
  Annotations         Annotation[]
  teachingClassrooms  Classroom[]     @relation("ClassroomProfessor")
  attendingClassrooms Classroom[]     @relation("ClassroomStudents")
  trainingsCreated    Training[]      @relation("TrainingAuthor")
  Trainings           Training[]      @relation("TrainingStudents")
  lessonsCreated      Lesson[]        @relation("LessonAuthor")
  attendingLessons    Lesson[]        @relation("LessonStudents")
  Discounts           Discount[]
  Subscriptions       Subscription[]
  progressLesson      ProgressLesson[]
  progressTraining    ProgressTraining[]
}

model Lesson {
  id              Int            @id @default(autoincrement())
  title           String?
  description     String?        @db.Text
  numberSteps     Int?
  steps           Json?
  difficultyLevel String?
  nbViews         Int?
  nbCompleted     Int?
  userId          Int?
  bannerPicture   String?
  author          User?          @relation("LessonAuthor", fields: [userId], references: [id])
  students        User[]         @relation("LessonStudents")
  tags            Tag[]
  trainings       Training[]
  comments        Comment[]
  subscriptions   Subscription[]
  videos          Video[]
  annotations     Annotation[]
  professors      Professor[]
  progressLesson  ProgressLesson[]
}

model Classroom {
  id             Int        @id @default(autoincrement())
  title          String?
  createdAt      DateTime   @default(now())
  lastUpdate     DateTime   @updatedAt
  userId         Int?
  bannerPicture  String?
  description    String?    @db.Text
  author         User?      @relation("ClassroomProfessor", fields: [userId], references: [id])
  students       User[]     @relation("ClassroomStudents")
  trainings      Training[]
  progressLesson ProgressLesson[]
}

model Training {
  id               Int            @id @default(autoincrement())
  title            String?
  description      String?        @db.Text
  difficultyLevel  String?
  createdAt        DateTime       @default(now())
  lastUpdate       DateTime       @updatedAt
  userId           Int?
  nbViews          Int?
  nbCompleted      Int?
  nbCertified      Int?
  bannerPicture    String?
  author           User?          @relation("TrainingAuthor", fields: [userId], references: [id])
  students         User[]         @relation("TrainingStudents")
  lessons          Lesson[]
  classrooms       Classroom[]
  tags             Tag[]
  subscriptions    Subscription[]
  professors       Professor[]
  progressTraining ProgressTraining[]
}

model ProgressLesson {
  id             Int        @id @unique @default(autoincrement())
  status         String?
  progress       Json?
  urlEval        String?
  studentId      Int?
  classroomId    Int?
  lessonId       Int?
  student        User?      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classroom      Classroom? @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  lesson         Lesson?    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model ProgressTraining {
  id             Int        @id @unique @default(autoincrement())
  status         String?
  studentId      Int?
  trainingId     Int?
  student        User?      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  training       Training? @relation(fields: [trainingId], references: [id], onDelete: Cascade)
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String?
  createdAt   DateTime @default(now())
  lastUpdate  DateTime @updatedAt
  nbUpvotes   Int?     @default(0)
  nbDownvotes Int?
  userId      Int?
  lessonId    Int?
  lesson      Lesson?  @relation(fields: [lessonId], references: [id])
  answer      Answer[]
  user        User?    @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model Answer {
  id         String   @id @unique @default(uuid())
  content    String?
  createdAt  DateTime @default(now())
  lastUpdate DateTime @updatedAt
  commentId  Int?
  userId     Int?
  validation Boolean
  user       User?    @relation(fields: [userId], references: [id], onDelete: NoAction)
  comment    Comment? @relation(fields: [commentId], references: [id])
}

model Annotation {
  id         String   @id @unique @default(uuid())
  content    String?
  createdAt  DateTime @default(now())
  lastUpdate DateTime @updatedAt
  userId     Int?
  lessonId   Int?
  author     User?    @relation(fields: [userId], references: [id])
  lessons    Lesson?  @relation(fields: [lessonId], references: [id])
}

model Tag {
  id          Int          @id @default(autoincrement())
  title       String?
  trainings   Training[]
  videos      Video[]
  shortVideos ShortVideo[]
  lessons     Lesson[]
}

model Subscription {
  id                 Int        @id @default(autoincrement())
  title              String?
  subscriptionType   String?
  subscriptionTarget String?
  subscriptionStatus Boolean
  createdAt          DateTime   @default(now())
  lastUpdate         DateTime   @updatedAt
  lessons            Lesson[]
  trainings          Training[]
  discounts          Discount[]
  user               User?      @relation(fields: [userId], references: [id])
  nbSubscribers      Int?
  nbCertified        Int?
  userId             Int?
}

model Discount {
  id             Int            @id @default(autoincrement())
  title          String?
  percentage     Int?
  startDate      DateTime?
  endDate        DateTime?
  discountStatus Boolean
  createdAt      DateTime       @default(now())
  lastUpdate     DateTime       @updatedAt
  userId         Int?
  author         User?          @relation(fields: [userId], references: [id])
  nbPurchases    Int?
  subscriptions  Subscription[]
}

model Professor {
  id          Int       @id @default(autoincrement())
  firstname   String?
  lastname    String?
  description String?   @db.Text
  instruments Json?
  nationality String?
  profilePicture String?
  awards      Json?
  jobs        Json?
  video       Video[]
  lesson      Lesson[]
  training    Training[]
}

model Video {
  id          Int          @id @default(autoincrement())
  title       String?
  url         String?
  createdAt   DateTime     @default(now())
  lastUpdate  DateTime     @updatedAt
  professors  Professor[]
  tags        Tag[]
  lessons     Lesson[]
  shortVideos ShortVideo[]
}

model ShortVideo {
  id         String   @id @unique @default(uuid())
  startTime  String?
  endTime    String?
  createdAt  DateTime @default(now())
  lastUpdate DateTime @updatedAt
  tags       Tag[]
  videoId    Int?
  video      Video?   @relation(fields: [videoId], references: [id])
}
